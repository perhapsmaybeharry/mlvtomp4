#!/bin/bash -i

# MARK: Colorization
CLEAR='\033[0m'
RED='\033[1;31m'
GREEN='\033[1;32m'

#
# This script converts Magic Lantern RAW Video (MLV) into
# MPEG4 (MP4) video that can be played by most video players.
#
# Simply provide a MLV file name in the arguments. This script
# can process multiple files per instance.
#
# Dependencies: mlv_dump, dcraw, ffmpeg.
#

# MARK: User-Defined Variables

# The codec for ffmpeg to convert to. Default is 'libx264 -crf 16'.
# You can also add other codec-related options here such as -crf 16 for libx264 or -profile:v 3 for prores_ks.
CODEC='prores_ks -profile:v 2'

# The framerate at which the MP4 should play at. Default is '24'.
FRAMERATE='23.976'

# Whether or not to keep intermediary DNGs
KEEPINTERMEDIARY='true'

# MARK: Check For Dependencies
if [ -z $(which mlv_dump) ]; then
	echo "missing mlv_dump dependency"
	exit 1
elif [ -z $(which dcraw) ]; then
	echo "missing dcraw dependency"
	exit 2
elif [ -z $(which ffmpeg) ]; then
	echo "missing ffmpeg dependency"
	exit 3
fi

# MARK: Trap Declaration
# this function will run just before the script exits
function janitor {	
	echo "cleaning up"
	cd ..
	if [ "$KEEPINTERMEDIARY" == 'false' ]; then rm -r .$$;
	else mv .$$ "$$-$1"; fi
}
function emergency {
	janitor
	exit 128
}
trap emergency SIGSTOP SIGKILL SIGINT

# MARK: Error Tracking
FILEERRORS=''

# MARK: Argument Processing
# Check if files were provided
if [ -z "$1" ]; then echo "no files were provided for conversion, please specify at least one MLV file to convert."; exit 4; fi

# Check if all the files provided exist
for file in $@; do if [ ! -f "$file" ]; then echo -e "${RED}$file does not exist${CLEAR}"; exit 5; fi; done

if [ -z "$FRAMERATE" ]; then FRAMERATE='24'; fi

PROCESSED=0

# MARK: Main Loop
for file in $@; do

	PROCESSED=$((PROCESSED+1))

	echo -e "\n${GREEN}processing $file ($PROCESSED/$#)${CLEAR}"

	# Switch to the parent directory of the file
	INDIR="$(cd "$(dirname "$file")"; pwd)"
	cd "$INDIR"
	echo "in directory $INDIR"
	
	# Create temporary directory
	mkdir -p ".$$"

	# Check that the previous command succeeded
	if [ $? -ne 0 ]; then echo -e "${RED}could not write files${CLEAR}"; exit 6; fi

	# Enter the temporary directory
	cd .$$

	echo "temporary directory $PWD"

	file="$(basename $file)"
	
	# Dump all the DNGs from the MLV file into the temporary directory
	echo "dumping DNGs"
	mlv_dump --dng --show-progress -o "" "../$file"

	# Check that the previous command succeeded (sometimes, there can be an MLV file that produces no DNG files, requiring the second check)
	if [ $? -ne 0 ]; then
		echo -e "${RED}could not dump DNGs${CLEAR}"
		FILEERRORS="$FILEERRORS $file (DNG dump error)"
		janitor
		continue
	elif [ $(ls | grep -i "dng" | wc -l) -eq 0 ]; then
		echo -e "${RED}empty MLV, no DNGs to dump${CLEAR}"
                FILEERRORS="$FILEERRORS $file (empty MLV)"
                janitor
                continue
	fi

	# Convert the DNGs to PPMs with dcraw (options to: use embedded color matrix, don't automatically brighten, interpolation quality 3, write 16-bit, write to stdout, gamma curve 2.222 4.5)
	# FFmpeg takes data from pipe and muxes into MP4 (options to: overwrite, probesize 10M, input audiofile, filter image2pipe, stitch at framerate, input stream from pipe0, copy video codec, audio codec to aac, scale to ensure framesize fits even dimensions, set video codec, set pixel format, output to mp4 with the same name as the input file in the parent directory) 
	dcraw -c +M -W -g 2.222 4.5 -q 3 -6 *.dng | ffmpeg -y -f image2pipe -r $FRAMERATE -vcodec ppm -i pipe:0 -vf yadif=parity=auto,scale="iw:trunc(ow/a/2)*2" -vcodec $CODEC -pix_fmt yuv422p10le noaudio.mp4

	if [ -f ".wav" ]; then
		echo "identified associated audio file"
		
		# muxing audio separately was added due to some complications (blue lines appearing in some frames on video) seemingly caused
		#   by simultaneously muxing audio in the same command as muxing video.
		ffmpeg -y -i noaudio.mp4 -i .wav -c:a aac -c:v copy ../$(echo $file | cut -f1 -d'.').mp4
	else
		mv noaudio.mp4 ../$(echo $file | cut -f1 -d'.').mp4
	fi

	# Check that the previous command succeeded (this one doesn't have janitor just in case you want to reencode again manually without having to wait so long)
	if [ $? -ne 0 ]; then
		echo -e "${RED}could not convert or stitch into MP4${CLEAR}"
		FILEERRORS="$FILEERRORS $file (FFmpeg error)"
		janitor
		continue
	fi

	# Clean up
	janitor "$file"

done

if [ ! -z "$FILEERRORS" ]; then echo -e "${RED}errors were encountered with the following files:${CLEAR} $FILEERRORS"; fi
echo -e "done\n"
