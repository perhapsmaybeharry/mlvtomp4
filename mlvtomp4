#!/bin/bash

# MARK: Colorization
CLEAR='\033[0m'
RED='\033[1;31m'
GREEN='\033[1;32m'

#
# This script converts Magic Lantern RAW Video (MLV) into
# MPEG4 (MP4) video that can be played by most video players.
#
# Simply provide a MLV file name in the arguments. This script
# can process multiple files per instance.
#
# Dependencies: mlv_dump, dcraw, ffmpeg.
#

# MARK: User-Defined Variables

# The codec for ffmpeg to convert to. Default is 'libx264 -crf 16'.
# You can also add other codec-related options here such as -crf 16 for libx264 or -profile:v 3 for prores_ks.
CODEC='prores_ks -profile:v 2'

# The framerate at which the MP4 should play at. Default is '24'.
FRAMERATE='24'

# Whether or not to keep intermediary DNGs
KEEPINTERMEDIARY='false'

# MARK: Check For Dependencies
if [ -z $(which mlv_dump) ]; then
	echo "missing mlv_dump dependency"
	exit 1
elif [ -z $(which dcraw) ]; then
	echo "missing dcraw dependency"
	exit 2
elif [ -z $(which ffmpeg) ]; then
	echo "missing ffmpeg dependency"
	exit 3
fi

# MARK: Trap Declaration
# this function will run just before the script exits
function janitor {	
	echo "cleaning up"
	cd ..
	if [ "$KEEPINTERMEDIARY" == 'false' ]; then rm -r .$$;
	else mv .$$ "$$-$1"; fi
}
function emergency {
	janitor
	exit 128
}
trap emergency SIGSTOP SIGKILL SIGINT

# MARK: Error Tracking
FILEERRORS=''

# MARK: Argument Processing
# Check if files were provided
if [ -z "$1" ]; then echo "no files were provided for conversion, please specify at least one MLV file to convert."; exit 4; fi

# Check if all the files provided exist
for file in $@; do if [ ! -f "$file" ]; then echo -e "${RED}$file does not exist${CLEAR}"; exit 5; fi; done

if [ -z "$FRAMERATE" ]; then FRAMERATE='24';
elif [ -z "$FRAMESIZE" ]; then FRAMESIZE='1824x684'; fi

PROCESSED=1

# MARK: Main Loop
for file in $@; do

	echo -e "\n${GREEN}processing $file ($PROCESSED/$#)${CLEAR}"

	# Switch to the parent directory of the file
	cd "$(dirname "$file")"
	
	# Create temporary directory
	mkdir -p ".$$"

	# Check that the previous command succeeded
	if [ $? -ne 0 ]; then echo -e "${RED}could not write files${CLEAR}"; exit 6; fi

	# Enter the temporary directory
	cd .$$

	echo "temporary directory $PWD"

	# Dump all the DNGs from the MLV file into the temporary directory
	echo "dumping DNGs"
	DUMP_OUTPUT=`mlv_dump --dng --show-progress -o "" "../$file"`

	# Check that the previous command succeeded (sometimes, there can be an MLV file that produces no DNG files, requiring the second check)
	if [ $? -ne 0 ] || [ $(echo $DUMP_OUTPUT | grep nan | wc -l) -gt 0 ]; then
		echo -e "${RED}could not dump DNGs${CLEAR}"
		FILEERRORS="$FILEERRORS $file (DNG dump error)"
		janitor
		continue
	fi

	if [ -f ".wav" ]; then
		echo "identified associated audio file"
		AUDIOFILE="-i .wav "
	fi

	dcraw +M -W -q 3 -6 -c -g 2.222 4.5 *.dng | ffmpeg -y -probesize 10M $AUDIOFILE-f image2pipe -r "$FRAMERATE" -i pipe:0 -c:v copy -c:a aac -vf scale="iw:trunc(ow/a/2)*2" -vcodec $CODEC -pix_fmt yuv422p10le ../$(echo $file | cut -f1 -d'.').mp4

	# Check that the previous command succeeded (this one doesn't have janitor just in case you want to reencode again manually without having to wait so long)
	if [ $? -ne 0 ]; then
		echo -e "${RED}could not convert or stitch into MP4${CLEAR}"
		FILEERRORS="$FILEERRORS $file (FFmpeg error)"
		janitor
		continue
	fi

	# Clean up
	janitor $file

	PROCESSED=$PROCESSED+1

done

if [ ! -z "$FILEERRORS" ]; then echo -e "${RED}errors were encountered with the following files:${CLEAR} $FILEERRORS"; fi
echo -e "done\n"
